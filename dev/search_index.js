var documenterSearchIndex = {"docs":
[{"location":"examples/collapse_dry_implicit.html#:-Water-collapse-(implicit)","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"","category":"section"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"\t<img src='../assets/collapse_exp.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Simulation of a water column collapsing under its own weight onto dry bottom. Here with strictly incompressible approach (Projection method).","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"module collapse_dry_implicit\n\nusing Printf\ninclude(\"../src/SPHLib.jl\")\nusing .SPHLib\nusing LinearAlgebra\nusing IterativeSolvers\nusing IncompleteLU","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Declare constant parameters","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"##kernel functions\nconst kernel = spline23\nconst Dkernel = Dspline23\nconst rDkernel = rDspline23\n\nconst dr = 4.0e-3       #average particle distance (decrease to make finer simulation)\nconst h = 2.8*dr        #size of kernel support\nconst rho0 = 1000.0     #fluid density\nconst g = 9.8           #gravitational acceleration\nconst mu = 8.4e-4       #dynamic viscosity\nconst m = dr^2*rho0     #particle mass\n\nconst Lmin = 3*kernel(h,0.)/rho0*(pi - (dr/h)^2)  #free particles are those that satisfy L < Lmin\n\n##geometry parameters\nconst water_column_width = 0.142\nconst water_column_height = 0.293\nconst box_height = 0.35\nconst box_width = 0.584\nconst nlayers = 3 #number of wall layers\nconst wall_width = nlayers*dr\n\n##temporal parameters\nconst dt = h/20.0\nconst dt_frame = 0.01\nconst t_end = 0.5\n\n##labels for particle types\nconst FLUID = 0.\nconst  WALL = 1.\nconst DUMMY = 2.","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Declare fields (unknowns)","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Dx, Dy = velocity\nDDx, DDy = acceleration\ntype = particle type\nP = pressure\ndiv = divergence of velocity\nL = value determining whether particle lies on a free surface","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"SPHLib.@define_particle Particle Dx Dy DDx DDy type P div L","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Define geometry and create particles","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"function main()\n\n\tcontainer = Rectangle((0., box_width), (0., box_height))\n\twater_column = Rectangle((0., water_column_width), (0., water_column_height))\n\twall = BoundaryLayer(container, dr, dr)\n\twall = Specification(wall, (x,y) -> (y < box_height))\n\tdummy_wall = BoundaryLayer(container, dr, wall_width)\n\tdummy_wall = Specification(dummy_wall, (x,y) -> (y < box_height))\n\tdummy_wall = BooleanDifference(dummy_wall, wall)\n\n\txrange = (-wall_width, box_width + wall_width)\n\tyrange = (-wall_width, 3*box_height)\n\tsys = ParticleSystem(Particle, xrange, yrange, dr, h)\n\tgenerate_particles!(sys, water_column, (x,y) -> Particle(x, y; type = FLUID))\n\tgenerate_particles!(sys, \t\t wall, (x,y) -> Particle(x, y; type =  WALL))\n\tgenerate_particles!(sys,   dummy_wall, (x,y) -> Particle(x, y; type = DUMMY))","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Particle interactions","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"\tfunction initialize!(p::Particle)\n\t\tif p.type == FLUID\n\t\t\tp.x += dt*p.Dx\n\t\t\tp.y += dt*p.Dy\n\t\t\t##gravity\n\t\t\tp.Dy += -g*dt\n\t\tend\n\t\tp.div = 0.\n\t\tp.L = 0.\n\tend\n\n\tfunction viscous_force!(p::Particle, q::Particle, r::Float64)\n\t\ttemp = 2.0*m*mu*rDkernel(h,r)/rho0^2\n\t\tp.DDx += temp*(p.Dx - q.Dx)\n\t\tp.DDy += temp*(p.Dy - q.Dy)\n\tend\n\n\tfunction find_div_and_L!(p::Particle, q::Particle, r::Float64)\n\t\tp.div += -((p.x - q.x)*(p.Dx - q.Dx) + (p.y - q.y)*(p.Dy - q.Dy))*m*rDkernel(h,r)/rho0\n\t\tp.L += -2.0*m*rDkernel(h,r)/rho0^2\n\tend\n\n\t@fastmath function internal_force!(p::Particle, q::Particle, r::Float64)\n\t\ttemp =  (p.P + q.P)/rho0^2\n\t\ttemp *= m*rDkernel(h,r)\n\t\tp.DDx += -temp*(p.x - q.x)\n\t\tp.DDy += -temp*(p.y - q.y)\n\tend\n\n\tfunction accelerate!(p::Particle)\n\t\tif p.type == FLUID\n\t\t\tp.Dx += dt*p.DDx\n\t\t\tp.Dy += dt*p.DDy\n\t\tend\n\t\tp.DDx = 0.\n\t\tp.DDy = 0.\n\tend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Functions to build the linear system","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"\t@fastmath function minus_laplace(p::Particle, q::Particle, r::Float64)::Float64\n\t\tif p == q\n\t\t\treturn p.type == DUMMY ? p.L : max(p.L, Lmin)\n\t\tend\n\t\treturn 2.0*m*rDkernel(h,r)/rho0^2\n\tend\n\n\t@fastmath function rhs(p::Particle)::Float64\n\t\treturn -p.div/dt\n\tend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Time iteration","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"\tv = VectorField(sys, (:Dx, :Dy), \"velocity\")\n\tP = ScalarField(sys, :P, \"pressure\")\n\ttype = ScalarField(sys, :type, \"type\")\n\tout_pvd = new_pvd_file(\"collapse_dry_implicit\")\n\tout_txt = open(\"collapse_dry_implicit/data.txt\", \"w\")\n\tN0 = length(sys.particles)\n\n\tfor k = 0 : Int64(round(t_end/dt))\n\t\tif (k %  Int64(round(dt_frame/dt)) == 0)\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\tsave_frame!(sys, out_pvd, v, P, type)\n\t\t\tdimless_time = string(k*dt*sqrt(g/water_column_height))\n\t\t\tleading_edge = maximum(p -> (p.type == FLUID ? p.x - water_column_width : 0.), sys.particles)/water_column_height\n\t\t\twrite(out_txt, string(dimless_time)*\" \"*string(leading_edge)*\"\\n\")\n\t\tend\n\t\tapply!(sys, initialize!)\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, viscous_force!)\n\n\t\t##assemble linear system and solve for pressure\n\t\tapply!(sys, find_div_and_L!)\n\t\tA = assemble_matrix(sys, minus_laplace)\n\t\tb = assemble_vector(sys, rhs)\n\t\ttry\n\t\t\tP .= cg(A, b; Pl = ilu(A; Ï„ = 5.0))\n\t\tcatch\n\t\t\tsave_pvd_file(out_pvd)\n\t\t\tclose(out_txt)\n\t\t\terror(\"Unable to solve linear system.\")\n\t\tend\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out_pvd)\n\tclose(out_txt)\nend\n\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"structs.html#Structs","page":"Structs","title":"Structs","text":"","category":"section"},{"location":"structs.html","page":"Structs","title":"Structs","text":"Modules = [SPHLib]\nPages = [\"structs.jl\"]","category":"page"},{"location":"structs.html#Main.SPHLib.AbstractParticle","page":"Structs","title":"Main.SPHLib.AbstractParticle","text":"AbstractParticle\n\nAbstract supertype for smoothed particles. Any structure with AbstractParticle supertype is expected to:\n\nbe mutable\nhave fields x::Float64 and y::Float64\n\n\n\n\n\n","category":"type"},{"location":"structs.html#Main.SPHLib.ParticleSystem","page":"Structs","title":"Main.SPHLib.ParticleSystem","text":"ParticleSystem(T::Type;\n               xlims::Tuple{Float64, Float64},\n               ylims::Tuple{Float64, Float64},\n               h::Float64)\n\nAn immutable struct that contains all vital information about the simulation. The constructor specifies that:\n\nthe simulation will use particles of type T <: AbstractParticle,\nit will take place inside a cartesian product xlims times ylims,\nParticles are considered neighbours if their distance is less than h.\n\nIndividual particles can be accessed through attribute ParticleSystem.particles\n\n\n\n\n\n","category":"type"},{"location":"structs.html#Main.SPHLib.ScalarField","page":"Structs","title":"Main.SPHLib.ScalarField","text":"ScalarField(sys::ParticleSystem, varS::Symbol, name::String = string(varS))\n\nCreates an abstract array whose n-th element is the value of scalar varS of n-th particle in sys. The name will be used when saved into a file.\n\n\n\n\n\n","category":"type"},{"location":"structs.html#Main.SPHLib.VectorField","page":"Structs","title":"Main.SPHLib.VectorField","text":"VectorField(sys::ParticleSystem, varS::Tuple{Symbol, Symbol}, name::String = string(varS))\n\nCreates an abstract array whose n-th element is the value of vector varS of n-th particle in sys.  The name will be used when saved into a file.\n\n\n\n\n\n","category":"type"},{"location":"structs.html#Main.SPHLib.@define_particle-Tuple{Symbol, Vararg{Symbol, N} where N}","page":"Structs","title":"Main.SPHLib.@define_particle","text":"@define_particle(name::Symbol, vars::Symbol...)\n\nMacro for quick definition of particles. Defines a struct with given name that is a subtype of AbstractParticle and has fields x, y and other fields specified in vars. Comes equipped with a default constructor that takes x, y as positional and vars as optionl keyword arguments (default to 0.0)\n\nExample:\n\n@define_particle Particle Dx Dy rho\n\nis equivalent to\n\nmutable struct Particle <: AbstractParticle\n\tx::Float64\n\ty::Float64\n\tDx::Float64\n\tDy::Float64\n\trho::Float64\n\tParticle(x, y; Dx = 0.0, Dy = 0.0, rho = 0.0) = new(x, y, Dx, Dy, rho)\nend\n\n\n\n\n\n","category":"macro"},{"location":"structs.html","page":"Structs","title":"Structs","text":"warning: Warning\nThe indentity of n-th particle in ParticleSystem may change when particles are added or removed.","category":"page"},{"location":"examples/cylinder.html#:-Flow-around-cylinder","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"","category":"section"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"\t<img src='../assets/cylinder.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"A simulation of flow around cylinder.\nAll parameters of this benchmark can be found\n <a href=\"http://www.mathematik.tu-dortmund.de/~featflow/en/benchmarks/cfdbenchmarking/flow/dfg_benchmark1_re20.html\">here.</a>","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"module cylinder\n\nusing Printf\ninclude(\"../src/SPHLib.jl\")\nusing .SPHLib\nusing Plots\n\nconst folder_name = \"cylinder\"","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"Declare constants","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"#geometry parameters\nconst dr = 4.5e-3 \t\t#average particle distance (decrease to make finer simulation)\nconst h = 2.2*dr\t\t#size of kernel support\nconst chan_l = 2.2      #length of the channel\nconst chan_w = 0.41     #width of the channel\nconst _cyl_x = 0.2      #x coordinate of the cylinder\nconst _cyl_y = 0.2      #y coordinate of the cylinder\nconst cyl_r = 0.05      #radius of the cylinder\nconst wall_w = h        #width of the wall\nconst inflow_l = 3.0*dr #width of inflow layer\nconst outflow_l = 3.0*dr #width of outflow layer\nconst symmetry_type = \"square\"\n\n#physical parameters\nconst U_max = 1.0       #maximum inflow velocity\nconst rho0 = 1.0\t\t#referential fluid density\nconst m = rho0*dr^2\t\t#particle mass\nconst c = 10.0*U_max\t#numerical speed of sound\nconst mu = 1.0e-3\t\t#dynamic viscosity of water\nconst nu = 1.0e-3\t\t#pressure stabilization\n\n#temporal parameters\nconst dt = 0.05*h/c      #time step\nconst dt_frame = 0.08   #how often data is saved\nconst t_end = 3.0       #end of simulation\n\n#particle types\nconst FLUID = 0.\nconst WALL = 1.\nconst INFLOW = 2.\nconst OBSTACLE = 3.","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"Declare fields (unknowns)","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"Dx, Dy = velocity\nFx, Fy = force\nrho = density\nP = pressure\nDrho = rate of density\ntype = particle type","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"#define particle\n@define_particle Particle Dx Dy Fx Fy rho Drho P type\n\n@fastmath function inflow_velocity(y::Float64)::Float64\n    return 4.0*U_max*y*(chan_w - y)/chan_w^2\nend\n\nfunction main()\n    xrange = (-inflow_l, chan_l)\n    yrange = (-wall_w, chan_w + wall_w) #to include walls in the simulation\n    sys = ParticleSystem(Particle, xrange, yrange, dr, h)\n\n    #define geometry\n    pipe = Rectangle((-inflow_l, chan_l), (0., chan_w))\n    (cyl_x, cyl_y) = SPHLib.snap_to_grid(sys, _cyl_x, _cyl_y; symmetry = symmetry_type)\n    circ = Circle(cyl_x, cyl_y, cyl_r)\n    pipe = BooleanDifference(pipe, circ)\n    wall = BoundaryLayer(pipe, dr, wall_w; symmetry = symmetry_type)\n    wall = Specification(wall, (x,y) -> (-inflow_l <= x <= chan_l))\n    inflow_layer = Specification(pipe, (x,y) -> (x < 0.))\n    pipe = Specification(pipe, (x,y) -> (x >= 0.))\n\n    #generate particles\n    generate_particles!(sys, pipe, (x,y) -> Particle(x, y; rho = rho0, type = FLUID); symmetry = symmetry_type)\n    generate_particles!(sys, inflow_layer, (x,y) -> Particle(x, y; rho = rho0, type = INFLOW, Dx = inflow_velocity(y)); symmetry = symmetry_type)\n    generate_particles!(sys, wall, (x,y) -> Particle(x, y; rho = rho0, type = is_inside(x,y,circ) ? OBSTACLE : WALL); symmetry = symmetry_type)\n\n    #this initial condition prevents shock waves\n    for p in sys.particles\n        if p.x > chan_w && p.type == FLUID\n            p.Dx =  inflow_velocity(p.y)\n        end\n    end\n\n    #Define interactions between particles\n\n\t@fastmath function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n        p.Drho += ( (p.x - q.x)*(p.Dx - q.Dx) + (p.y - q.y)*(p.Dy - q.Dy) #divergence of velocity\n\t\t\t\t\t+ 2.0*nu*(p.rho - q.rho) #pressure stabilization\n\t\t\t\t  )*m*rDwendland2(h,r)\n\tend\n\n    @fastmath function find_pressure!(p::Particle)\n        p.rho += p.Drho*dt\n        p.Drho = 0.0\n        p.P = rho0*c^2*((p.rho/rho0)^7 - 1.0)/7\n    end\n\n\t@fastmath function pressure_force!(p::Particle, q::Particle, r::Float64)\n\t\ttemp = -(p.P/p.rho^2 + q.P/q.rho^2)*m*m*rDwendland2(h,r)\n\t\tp.Fx += temp*(p.x - q.x)\n\t\tp.Fy += temp*(p.y - q.y)\n\tend\n\n    @fastmath function viscous_force!(p::Particle, q::Particle, r::Float64)\n        temp = 2.0*mu/(p.rho*q.rho)*m*m*rDwendland2(h,r)\n        p.Fx += temp*(p.Dx - q.Dx)\n\t\tp.Fy += temp*(p.Dy - q.Dy)\n\tend\n\n\t@fastmath function move!(p::Particle)\n\t\tp.Fx = 0.0\n\t\tp.Fy = 0.0\n        if p.type != WALL\n            p.x += p.Dx*dt\n            p.y += p.Dy*dt\n        end\n\tend\n\n    @fastmath function accelerate!(p::Particle)\n        if p.type == FLUID\n            p.Dx += 0.5*p.Fx*dt/m\n            p.Dy += 0.5*p.Fy*dt/m\n        end\n    end\n\n    function add_new_particles!(sys::ParticleSystem)\n        new_particles = Particle[]\n        for p in sys.particles\n            if p.type == INFLOW && p.x - inflow_l >= 0\n                p.type = FLUID\n                push!(new_particles, Particle(p.x - inflow_l, p.y; rho = rho0, type = INFLOW, Dx = inflow_velocity(p.y)))\n            end\n        end\n        append!(sys.particles, new_particles)\n    end\n\n    function calculate_force(sys::ParticleSystem)::Tuple{Float64, Float64, Float64}\n        Fx = 0.\n        Fy = 0.\n        for p in sys.particles\n            if p.type == OBSTACLE\n                Fx += p.Fx\n                Fy += p.Fy\n            end\n        end\n        C_D = 2.0*Fx/((2.0*U_max/3.0)^2*(2.0*cyl_r))\n        C_L = 2.0*Fy/((2.0*U_max/3.0)^2*(2.0*cyl_r))\n        P_front = SPHLib.sum(sys, (p, r) -> (m/p.rho)*p.P*wendland2(h,r), cyl_x - cyl_r, cyl_y)\n        P_rear  = SPHLib.sum(sys, (p, r) -> (m/p.rho)*p.P*wendland2(h,r), cyl_x + cyl_r, cyl_y)\n        return (C_D, C_L, P_front - P_rear)\n    end\n\n    #Time iteration\n\ttype = ScalarField(sys, :type, \"type\")\n    P = ScalarField(sys, :P, \"pressure\")\n\tv = VectorField(sys, (:Dx, :Dy), \"velocity\")\n\n\tout_pvd = new_pvd_file(folder_name)\n    out_txt = open(folder_name*\"/data.txt\", \"w\")\n\n    #a modified Verlet scheme\n\tfor k = 0 : Int64(round(t_end/dt))\n        #move particles\n        apply!(sys, move!)\n        add_new_particles!(sys)\n        create_cell_list!(sys)\n        #compute forces\n        apply!(sys, viscous_force!)\n\t\tapply!(sys, balance_of_mass!)\n        apply!(sys, find_pressure!)\n\t\tapply!(sys, pressure_force!)\n        #accelerate\n        apply!(sys, accelerate!)\n        #save data at selected frames\n        if (k %  Int64(round(dt_frame/dt)) == 0)\n            @printf(\"t = %.6e\\n\", k*dt)\n            save_frame!(sys, out_pvd, v, P, type)\n            (C_D, C_L, P_diff) = calculate_force(sys)\n            @printf(\"C_D = %.6e\\t C_L = %.6e\\t P_diff = %.6e\\n\\n\", C_D, C_L, P_diff)\n            write(out_txt, string(C_D)*\" \"*string(C_L)*\" \"*string(P_diff)*\"\\n\")\n        end\n        #accelerate\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out_pvd)\n    close(out_txt)\nend\n\nfunction plot_results(N::Int64)\n    file = readlines(folder_name*\"/data.txt\")[end-N-1:end-1]\n    N = length(file)\n    C_D    = zeros(N)\n    C_L    = zeros(N)\n    P_diff = zeros(N)\n    for row in 1:N\n        line = split(file[row])\n        C_D[row] = parse(Float64, line[1])\n        C_L[row] = parse(Float64, line[2])\n        P_diff[row] = parse(Float64, line[3])\n    end\n    C_D_avg = sum(x -> x/N, C_D)\n    C_L_avg = sum(x -> x/N, C_L)\n    P_diff_avg = sum(x -> x/N, P_diff)\n    println(\"C_D = \", C_D_avg)\n    println(\"C_L = \", C_L_avg)\n    println(\"P_diff = \", P_diff_avg)\n    plot1 = plot(1:N, [C_D  (ones(N).*C_D_avg) (ones(N).*5.57953523384)], linewidth = 1.5, label = [\"SPH result\" \"SPH average\" \"reference value\"], xlabel = \"time\", ylabel = \"drag coefficient\", ylims = (0.7*5.57953523384, 1.3*5.57953523384))\n    savefig(plot1, folder_name*\"/C_D.pdf\")\n    plot2 = plot(1:N, [C_L  (ones(N).*C_L_avg) (ones(N).*0.010618948146)],  linewidth = 1.5, label = [\"SPH result\" \"SPH average\" \"reference value\"], xlabel = \"time\", ylabel = \"lift coefficient\", ylims = (-0.2, 0.5))\n    savefig(plot2, folder_name*\"/C_L.pdf\")\n    plot3 = plot(1:N, [P_diff (ones(N).*P_diff_avg)  (ones(N).*0.11752016697)], linewidth = 1.5, label = [\"SPH result\" \"SPH average\" \"reference value\"], xlabel = \"time\", ylabel = \"pressure difference\", ylims = (0.7*0.11752016697, 1.3*0.11752016697))\n    savefig(plot3, folder_name*\"/P_diff.pdf\")\nend\n\nend","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"IO.html#Input/Output","page":"Input/Output","title":"Input/Output","text":"","category":"section"},{"location":"IO.html","page":"Input/Output","title":"Input/Output","text":"Modules = [SPHLib]\nPages = [\"IO.jl\"]","category":"page"},{"location":"IO.html#Main.SPHLib.DataStorage","page":"Input/Output","title":"Main.SPHLib.DataStorage","text":"DataStorage\n\nStorage for paraview input/output.\n\n\n\n\n\n","category":"type"},{"location":"IO.html#Main.SPHLib.new_pvd_file-Tuple{String}","page":"Input/Output","title":"Main.SPHLib.new_pvd_file","text":"new_pvd_file(path::String)::DataStorage\n\nCteates new DataStorage in a given path.\n\n\n\n\n\n","category":"method"},{"location":"IO.html#Main.SPHLib.save_frame!-Tuple{Main.SPHLib.ParticleSystem, Main.SPHLib.DataStorage, Vararg{Main.SPHLib.DataField, N} where N}","page":"Input/Output","title":"Main.SPHLib.save_frame!","text":"save_frame!(sys::ParticleSystem, data::DataStorage, vars::DataField...)\n\nInserts one time frame into a DataStorage that includes all vars... as fields.\n\n\n\n\n\n","category":"method"},{"location":"IO.html#Main.SPHLib.save_pvd_file-Tuple{Main.SPHLib.DataStorage}","page":"Input/Output","title":"Main.SPHLib.save_pvd_file","text":"save_pvd_file(data::DataStorage)\n\nSaves and closes DataStorage.\n\n\n\n\n\n","category":"method"},{"location":"examples/static_container.html#:-Static-container","page":"1: Static container","title":"1: Static container","text":"","category":"section"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"\t<img src='../assets/static_container.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"This is hello world of SPH. Simulates motionless fluid in uniform gravitational field. Things that may be tested by this benchmark are:","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"walls,\nzero point stability of time integrator,\nstability of free surface.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Let us begin by declaring a module and importing some stuff.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"module static_container\n\nusing Printf\ninclude(\"../src/SPHLib.jl\")\nusing .SPHLib","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Declare constant parameters","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"const dr = 3.0e-3     #average particle distance\nconst h = 1.8*dr      #size of kernel support\nconst rho0 = 1000.0   #fluid density\nconst m = rho0*dr^2   #particle mass\nconst c = 40.0        #numerical speed of sound\nconst g = 1.0         #gravitational acceleration\nconst mu = 8.4e-4     #dynamic viscosity of water\n\nconst water_depth = 0.14\nconst box_height = 0.18\nconst box_width = 0.14\nconst wall_width = 2*dr\n\n\nconst dt = 0.2*h/c\nconst dt_frame = 0.1\nconst t_end = 0.5\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Declare fields (unknowns)","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Dx, Dy = velocity\nDDx, DDy = acceleration\nrho = density\ntype = particle type","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"SPHLib.@define_particle Particle Dx Dy DDx DDy rho type\n\n##dependance of pressure on density\n@inline function pressure(p::Particle)\n\treturn c^2*(p.rho - rho0)\nend","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Define geometry and make particles","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"function main()\n\n\tbox = Rectangle((0., box_width), (0., box_height))\n\tfluid = Rectangle((0., box_width), (0., water_depth))\n\twalls = BoundaryLayer(box, dr, wall_width)\n\n\txrange = (-wall_width, box_width  + wall_width)\n\tyrange = (-wall_width, box_height + wall_width)\n\tsys = ParticleSystem(Particle, xrange, yrange, dr, h)\n\tgenerate_particles!(sys, fluid, (x,y) -> Particle(x,y; rho = rho0, type = FLUID))\n\tgenerate_particles!(sys, walls, (x,y) -> Particle(x,y; rho = rho0, type = WALL))","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Define particle interactions","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"\t@inline function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\t\tp.rho += dt*((p.x - q.x)*(p.Dx - q.Dx) + (p.y - q.y)*(p.Dy - q.Dy))*m*rDwendland2(h,r)\n\tend\n\n\t@inline function internal_force!(p::Particle, q::Particle, r::Float64)\n\t\tif p.type == FLUID\n\t\t\tpressure_term = pressure(p)/p.rho^2 + pressure(q)/q.rho^2\n\t\t\tviscous_term = 2.0*mu/(p.rho*q.rho)\n\t\t\tkernel = m*rDwendland2(h,r)\n\t\t\tp.DDx += kernel*(-pressure_term*(p.x - q.x) + viscous_term*(p.Dx - q.Dx))\n\t\t\tp.DDy += kernel*(-pressure_term*(p.y - q.y) + viscous_term*(p.Dy - q.Dy))\n\t\tend\n\tend\n\n\t@inline function update!(p::Particle)\n\t\tif p.type == FLUID\n\t\t\tp.Dx += p.DDx*dt\n\t\t\tp.Dy += (p.DDy - g)*dt\n\t\t\tp.x += p.Dx*dt\n\t\t\tp.y += p.Dy*dt\n\t\tend\n\t\tp.DDx = 0.0\n\t\tp.DDy = 0.0\n\tend","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Put everything into a time loop","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"\ttype = ScalarField(sys, :type, \"type\")\n\trho = ScalarField(sys, :rho, \"density\")\n\tv = VectorField(sys, (:Dx, :Dy), \"velocity\")\n\n\tout = new_pvd_file(\"static_container\")\n\tfor k = 0 : Int64(round(t_end/dt))\n\t\tif (k %  Int64(round(dt_frame/dt)) == 0)\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\tsave_frame!(sys, out, rho, v, type)\n\t\tend\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, update!)\n\tend\n\tsave_pvd_file(out)\nend ##function main()\n\nend ##module","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"This page was generated using Literate.jl.","category":"page"},{"location":"kernels.html#Kernels","page":"Kernels","title":"Kernels","text":"","category":"section"},{"location":"kernels.html","page":"Kernels","title":"Kernels","text":"Smoothing kernels are the guts of SPH. They measure the strength of interaction between neighbouring particles based on their distance. They are also used to interpolate particle variables into continuous Eulerian fields.","category":"page"},{"location":"kernels.html","page":"Kernels","title":"Kernels","text":"Modules = [SPHLib]\nPages = [\"kernels.jl\"]","category":"page"},{"location":"kernels.html#Main.SPHLib.Dspline23-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.Dspline23","text":"Dspline23(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.Dspline24-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.Dspline24","text":"Dspline24(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.Dwendland2-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.Dwendland2","text":"Dwendland2(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.rDspline23-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.rDspline23","text":"rDspline23(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.rDspline24-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.rDspline24","text":"rDspline24(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.rDwendland2-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.rDwendland2","text":"rDwendland2(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.spline23-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.spline23","text":"spline23(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.spline24-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.spline24","text":"spline24(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Main.SPHLib.wendland2-Tuple{Float64, Float64}","page":"Kernels","title":"Main.SPHLib.wendland2","text":"wendland2(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Core","page":"Core","title":"Core","text":"","category":"section"},{"location":"core.html","page":"Core","title":"Core","text":"Modules = [SPHLib]\nPages = [\"core.jl\"]","category":"page"},{"location":"core.html#Main.SPHLib.apply!-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Core","title":"Main.SPHLib.apply!","text":"apply!(sys::ParticleSystem, action!::Function; self::Bool = false)\n\nCalls either apply_unary! or apply_binary! according to the signature of action!. If self == true, then particle self-interaction for binary operator is allowed.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.apply_binary!-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Core","title":"Main.SPHLib.apply_binary!","text":"apply_binary!(sys::ParticleSystem, action!::Function)\n\nApply a binary operator action!(p::T, q::T, r::Float64) between any two neighbouring particles p, q in sys::ParticleSystem{T}. Value r is their mutual distance.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.apply_unary!-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Core","title":"Main.SPHLib.apply_unary!","text":"apply_unary!(sys::ParticleSystem, action!::Function)\n\nApply a unary operator action!(p::T) on every particle p in sys::ParticleSystem{T}.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.assemble_matrix-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Core","title":"Main.SPHLib.assemble_matrix","text":"assemble_matrix(sys::ParticleSystem, func::Function)::SparseMatrixCSC{Float64}\n\nFor given function func(p::T, q::T)::Float64 where T <: AbstractParticle, assemble a sparse matrix mathbbA, such that\n\n\tA_ij = textfunc(p_i p_j)\n\nwhere p_i, p_j are respectively the i-th and j-th particle in sys::ParticleSystem{T}.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.assemble_vector-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Core","title":"Main.SPHLib.assemble_vector","text":"assemble_vector(sys::ParticleSystem, func::Function)::Vector{Float64}\n\nFor given function func(q::T)::Float64 where T <: AbstractParticle, assemble a vector mathbfv, such that \n\n\tv_i =  textfunc(p_i)\n\nwhere p_i is the i-th particle in sys::ParticleSystem{T}.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.create_cell_list!-Tuple{Main.SPHLib.ParticleSystem}","page":"Core","title":"Main.SPHLib.create_cell_list!","text":"create_cell_list!(sys::ParticleSystem)\n\nCreate the cell list for given particle system sys. This function should be always called after updating positions. Without updated cell list, applying binary particle operators or assembling matrices will lead to incorrect results.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.dist-Tuple{Main.SPHLib.AbstractParticle, Main.SPHLib.AbstractParticle}","page":"Core","title":"Main.SPHLib.dist","text":"dist(p::AbstractParticle, q::AbstractParticle)::Float64\n\nCalculate the distance between two particles p and q.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Main.SPHLib.sum-Tuple{Main.SPHLib.ParticleSystem, Function, Float64, Float64}","page":"Core","title":"Main.SPHLib.sum","text":"sum(sys::ParticleSystem, func::Function, x::Float64, y::Float64)::Float64\n\nFor given function func(p::T, r::Float64)::Float64 where T <: AbstractParticle it returns the sum\n\n\tsum_p in textsysparticles textfunc(p sqrt(px - x)^2 + (py - y)^2)\n\nThis can be useful if one needs to compute SPH interpolation in a point which is not occupied by a particle.\n\n\n\n\n\n","category":"method"},{"location":"geometry.html#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"geometry.html","page":"Geometry","title":"Geometry","text":"Modules = [SPHLib]\nPages = [\"geometry.jl\"]","category":"page"},{"location":"geometry.html#Main.SPHLib.default_symmetry","page":"Geometry","title":"Main.SPHLib.default_symmetry","text":"default_symmetry = \"hexagonal\"\n\n\n\n\n\n","category":"constant"},{"location":"geometry.html#Main.SPHLib.BooleanDifference","page":"Geometry","title":"Main.SPHLib.BooleanDifference","text":"BooleanDifference(s1::Shape, s2::Shape) <: Shape\n\nDefine a shape as difference of two shapes. Equivalent to s1 - s2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.BooleanIntersection","page":"Geometry","title":"Main.SPHLib.BooleanIntersection","text":"BooleanIntersection(s1::Shape, s2::Shape) <: Shape\n\nDefine a shape as intersection of two shapes. Equivalent to s1 * s2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.BoundaryLayer","page":"Geometry","title":"Main.SPHLib.BoundaryLayer","text":"BoundaryLayer(s::Shape, dr::Float64, width::Float64; symmetry = default_symmetry) <: Shape\n\nCreates a layer of certain width around shape s. This requires some details about the discretization, namely dr (characterstic length) and symmetry.\n\nSupported values of symmetry are \"hexagonal\" or \"square\".\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Circle","page":"Geometry","title":"Main.SPHLib.Circle","text":"Circle(x::Float64, y::Float64, r::Float64) <: Shape\n\nDefine a circle by specifying the center (x, y) and the radius r.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Ellipse","page":"Geometry","title":"Main.SPHLib.Ellipse","text":"Ellipse(x::Float64, y::Float64, r1::Float64, r2::Float64) <: Shape\n\nDefine an ellipse by specifying the center (x, y) and two semi-major/minor axes r1, r2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Polygon","page":"Geometry","title":"Main.SPHLib.Polygon","text":"Polygon(v::Tuple{Float64, Float64}...) <: Shape\n\nDefine a polygon by specifying all vortices.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Rectangle","page":"Geometry","title":"Main.SPHLib.Rectangle","text":"Rectangle(xrange::Tuple{Float64, Float64}, yrange::Tuple{Float64, Float64}) <: Shape\n\nDefine a rectangle as a cartesian product of two intervals.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Shape","page":"Geometry","title":"Main.SPHLib.Shape","text":"Shape\n\nSupertype for 2d geometrical shapes. Every user-defined subtype T <: Shape is expected to support method\n\nis_inside(x::Float64, y::Float64, s::Shape) -> Bool\n\nwhich determines whether a given point (x, y) lies inside s.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.Specification","page":"Geometry","title":"Main.SPHLib.Specification","text":"Specification(s::Shape, f::Function) <: Shape\n\nDefine a shape of all (x, y) in s, such that f(x,y) == true.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#Main.SPHLib.generate_particles!-Tuple{Main.SPHLib.ParticleSystem, Function, Function}","page":"Geometry","title":"Main.SPHLib.generate_particles!","text":"generate_particles!(sys::ParticleSystem,\n                    char_function::Function,\n                    constructor::Function;\n                    dr::Float64 = sys.dr,\n                    symmetry::String = default_symmetry)\n\nCreate particles using constructor(x::Float64, y::Float64)::AbstractParticle at every point, where char_function(x::Float64, y::Float64)::Bool is true. The density of particles will be frac1textdr^2.\n\nSupported values of symmetry are \"hexagonal\" or \"square\".\n\n\n\n\n\n","category":"method"},{"location":"geometry.html#Main.SPHLib.generate_particles!-Tuple{Main.SPHLib.ParticleSystem, Main.SPHLib.Shape, Function}","page":"Geometry","title":"Main.SPHLib.generate_particles!","text":"generate_particles!(sys::ParticleSystem,\n                    geometry::Shape,\n                    constructor::Function;\n                    dr::Float64 = sys.dr,\n                    symmetry::String = default_symmetry)\n\nCreate particles using constructor(x::Float64, y::Float64)::AbstractParticle at every point inside a given shape. The density of particles will be frac1textdr^2.\n\nSupported values of symmetry are \"hexagonal\" or \"square\".\n\n\n\n\n\n","category":"method"},{"location":"geometry.html#Main.SPHLib.remove_particles!-Tuple{Main.SPHLib.ParticleSystem, Function}","page":"Geometry","title":"Main.SPHLib.remove_particles!","text":"remove_particles!(sys::ParticleSystem, criterion::Function)\n\nRemove all particles p in sys satisfying criterion(p) == true.\n\n\n\n\n\n","category":"method"},{"location":"geometry.html#Main.SPHLib.snap_to_grid-Tuple{Main.SPHLib.ParticleSystem, Float64, Float64}","page":"Geometry","title":"Main.SPHLib.snap_to_grid","text":"snap_to_grid(sys::ParticleSystem,\n             x::Float64, y::Float64;\n             symmetry::String = default_symmetry\n             )::Tuple{Float64, Float64}\n\nFind the nearest point to (x, y) which will be inside a grid.\n\n\n\n\n\n","category":"method"},{"location":"examples/collapse_dry.html#:-Water-collapse-(explicit)","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"","category":"section"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"\t<img src='../assets/collapse_exp.png' alt='missing' width=\"50%\" height=\"50%\" /><br>","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Simulation of a water column collapsing under its own weight onto dry bottom. This is, where SPH is more useful than typical mesh-based methods","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"module collapse_dry\n\nusing Printf\ninclude(\"../src/SPHLib.jl\")\nusing .SPHLib","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Declare constant parameters","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"##physical\nconst dr = 5.0e-3       #average particle distance (decrease to make finer simulation)\nconst h = 2.0*dr        #size of kernel support\nconst rho0 = 1.0     #fluid density\nconst m = rho0*dr^2     #particle mass\nconst c = 50.0          #numerical speed of sound\nconst g = 1.0           #gravitational acceleration\nconst mu = 0.0         #dynamic viscosity of water\nconst nu = 1.0         #pressure stabilization\n\n##geometrical\nconst water_column_width = 0.142\nconst water_column_height = 0.293\nconst box_height = 0.35\nconst box_width = 0.584\nconst wall_width = 2.0*dr\n\n##temporal\nconst dt = 0.0001 #0.2*h/c\nconst dt_frame = dt\nconst t_end = 50*dt\n\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Declare fields (unknowns)","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Dx, Dy = velocity\nFx, Fy = force\nrho = density\nP = pressure\nDrho = rate of density\ntype = particle type","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"SPHLib.@define_particle Particle Dx Dy Fx Fy rho Drho P type","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Define geometry and make particles","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"function main()\n\tcontainer = Rectangle((0., box_width), (0., box_height))\n\twater_column = Rectangle((0., water_column_width), (0., water_column_height))\n\twalls = BoundaryLayer(container, dr, wall_width)\n\twalls = Specification(walls, (x,y) -> (y < box_height))\n\n\txrange = (-100*wall_width, box_width + 100*wall_width)\n\tyrange = (-100*wall_width, 3*box_height)\n\tsys = ParticleSystem(Particle, xrange, yrange, dr, h)\n\tgenerate_particles!(sys, water_column, (x,y) -> Particle(x, y; type = FLUID, rho = rho0))\n\tgenerate_particles!(sys, \t\twalls, (x,y) -> Particle(x, y; type =  WALL, rho = rho0))","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Define particle interactions","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"\tfunction balance_of_mass!(p::Particle, q::Particle, r::Float64)\n        p.Drho += ( (p.x - q.x)*(p.Dx - q.Dx) + (p.y - q.y)*(p.Dy - q.Dy) #divergence of velocity","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"\t\t\t\t  )*m*rDwendland2(h,r)\n\tend\n\n\tfunction find_pressure!(p::Particle)\n\t\tp.rho += p.Drho*dt\n\t\tp.Drho = 0.0\n\t\tp.P = c^2*(p.rho - rho0)\n\tend\n\n\tfunction pressure_force!(p::Particle, q::Particle, r::Float64)\n\t\ttemp = -(p.P/rho0^2 + q.P/rho0^2)*m*m*rDwendland2(h,r)\n\t\tp.Fx += temp*(p.x - q.x)\n\t\tp.Fy += temp*(p.y - q.y)\n\tend\n\n   function viscous_force!(p::Particle, q::Particle, r::Float64)\n        temp = 2.0*mu/(rho0^2)*m*m*rDwendland2(h,r)\n        p.Fx += temp*(p.Dx - q.Dx)\n\t\tp.Fy += temp*(p.Dy - q.Dy)\n\tend\n\n\tfunction move!(p::Particle)\n\t\tp.Fx = 0.0\n\t\tp.Fy = 0.0\n        #if p.type != WALL\n            p.x += p.Dx*dt\n            p.y += p.Dy*dt\n        #end\n\tend\n\n\tfunction gravity!(p::Particle)\n\t\tif p.type != WALL\n\t\t\tp.Fy -= g\n\t\tend\n\tend\n\n\tfunction accelerate!(p::Particle)\n        #if p.type == FLUID\n            p.Dx += 0.5*p.Fx*dt/m\n            p.Dy += 0.5*p.Fy*dt/m\n        #end\n    end\n\n\tfunction energy(p::Particle)::Float64\n\t\treturn m*(0.5*p.Dx*p.Dx + 0.5*p.Dy*p.Dy + g*p.y + 0.5*c^2*(p.rho - rho0)^2/(2*rho0^2))\n\tend","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Put everything into a time loop","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"\ttype = ScalarField(sys, :type, \"type\")\n\tP = ScalarField(sys, :P, \"pressure\")\n\trho = ScalarField(sys, :rho, \"rho\")\n\tv = VectorField(sys, (:Dx, :Dy), \"velocity\")\n\tout = new_pvd_file(\"collapse_dry\")\n\n    #a modified Verlet scheme\n\tfor k = 0 : Int64(round(t_end/dt))\n        #move particles\n        apply!(sys, move!)\n        create_cell_list!(sys)\n        #compute forces\n\t\tapply!(sys, gravity!)\n        #apply!(sys, viscous_force!)\n\t\t#apply!(sys, balance_of_mass!)\n\t\t#apply!(sys, find_pressure!)\n\t\t#apply!(sys, pressure_force!)\n        #accelerate\n        apply!(sys, accelerate!)\n        #save data at selected frames\n        if (k %  Int64(round(dt_frame/dt)) == 0)\n            @printf(\"t = %.6e\\n\", k*dt)\n\t\t\t@printf(\"E = %.6e\\n\", sum(energy, sys.particles))\n\t\t\t@printf(\"\\n\")\n            save_frame!(sys, out, v, P, rho, type)\n        end\n        #accelerate\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out)\nend ## function main\n\nend ## module","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"runexamples.html#About-the-examples","page":"About the examples","title":"About the examples","text":"","category":"section"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"The examples have been designed with the following issues in mind:","category":"page"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"they run from the Julia REPL\neach example is a Julia module named similar to the basename of the example file.\nan example can be used as the starting point for a project \nthe examples at the same time comprise the test suite for SPHLib.","category":"page"},{"location":"runexamples.html#Running-the-examples","page":"About the examples","title":"Running the examples","text":"","category":"section"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"In order to run ExampleXXX, peform the following steps:","category":"page"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"Download the example file (e.g. via the source code link at the top)\nCall Julia with  an Julia environment which contains SPHLib.jl\ninclude(\"ExampleXXX.jl\")\nRun the example via ExampleXXX.main()","category":"page"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"Due to the encapsulation into modules, you can load as many examples as you like.","category":"page"},{"location":"runexamples.html","page":"About the examples","title":"About the examples","text":"If you want to modifiy the example, consider using Revise.jl and includet. ","category":"page"},{"location":"examples/cavity_flow.html#:-Lid-driven-cavity","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"","category":"section"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"module cavity_flow\n\nusing Printf\ninclude(\"../src/SPHLib.jl\")\nusing .SPHLib","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Declare const parameters (all dims in SI)","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"##geometrical/physical parameters\nconst Re = 100.0                #Reynolds number\nconst llid = 0.2                #length of the lid\nconst mu = 8.4e-4               #viscosity of water\nconst rho0 = 1.0e+3             #density of water\nconst vlid = mu*Re/(rho0*llid)     #flow speed of the lid\nconst dr = llid/70 \t\t        #average particle distance\nconst h = 2.2*dr\t\t        #size of kernel support\nconst m = rho0*dr^2             #particle mass\nconst c = 10*vlid\t\t\t#numerical speed of sound\nconst wwall = h\n\n##temporal parameters\nconst dt = 0.2*h/c              #numerical time-step\nconst dt_frame = 20.           #how often save data\nconst t_end = 2000.            #end of simulation\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.\nconst LID = 2.","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Declare fields (unknowns)","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Dx, Dy = velocity\nDDx, DDy = acceleration\nrho = density\nP = pressure\ntype = particle type","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"@define_particle Particle Dx Dy DDx DDy rho type P\n\nfunction main()","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Define geometry and create particles","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"\tsys = ParticleSystem(Particle, (-2*wwall, llid + 2*wwall), (-2*wwall, llid + 2*wwall), dr, h)\n\tbox = Rectangle((0., llid), (0., llid))\n\twalls = BoundaryLayer(box, dr, wwall)\n\tlid   = Specification(walls, (x,y) -> y > llid)\n\twalls = Specification(walls, (x,y) -> y <= llid)\n\n\tgenerate_particles!(sys, box, (x,y) -> Particle(x,y; type = FLUID, rho = rho0))\n\tgenerate_particles!(sys, lid, (x,y) -> Particle(x,y; type = LID, rho = rho0, Dx = vlid))\n\tgenerate_particles!(sys, walls, (x,y) -> Particle(x,y; type = WALL, rho = rho0))","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Define interactions between particles","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"\tfunction balance_of_mass!(p::Particle, q::Particle, r::Float64)\n    \tif p.type == FLUID\n      \t\tp.rho += dt*((p.x - q.x)*(p.Dx - q.Dx) + (p.y - q.y)*(p.Dy - q.Dy))*m*rDwendland2(h,r)\n    \tend\n  \tend\n\n\tfunction internal_force!(p::Particle, q::Particle, r::Float64)\n\t\tpressure_term = p.P/p.rho^2 + q.P/q.rho^2\n\t\tviscous_term = 2.0*mu/(p.rho*q.rho)\n\t\tkernel = m*rDwendland2(h,r)\n\t\tp.DDx += kernel*(-pressure_term*(p.x - q.x) + viscous_term*(p.Dx - q.Dx))\n\t\tp.DDy += kernel*(-pressure_term*(p.y - q.y) + viscous_term*(p.Dy - q.Dy))\n\tend\n\n\tfunction find_pressure!(p::Particle)\n\t\tp.P = c^2*(p.rho - rho0)\n\tend\n\n\tfunction update!(p::Particle)\n\t\tif p.type == FLUID\n\t\t\tp.Dx += p.DDx*dt\n\t\t\tp.Dy += p.DDy*dt\n\t\t\tp.x += p.Dx*dt\n\t\t\tp.y += p.Dy*dt\n\t\tend\n\t\tp.DDx = 0.0\n\t\tp.DDy = 0.0\n\tend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Time iteration","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"\tout = new_pvd_file(\"cavity_flow\")\n\tP = ScalarField(sys, :P, \"pressure\")\n\tv = VectorField(sys, (:Dx, :Dy), \"velocity\")\n\ttype = ScalarField(sys, :type, \"type\")\n\n\tprintln(count(p->(p.type == LID), sys.particles), \" lid particles\\n\")\n\tprintln(count(p->(p.type == WALL), sys.particles), \" wall particles\\n\")\n\tprintln(count(p->(p.type == FLUID), sys.particles), \" fluid particles\\n\")\n\t@time for k = 0 : Int64(round(t_end/dt))\n\t\tif (k % Int64(round(dt_frame/dt)) == 0) #save the frame\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\tsave_frame!(sys, out, P, v, type)\n\t\tend\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, find_pressure!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, update!)\n\tend\n\tsave_pvd_file(out)\nend\n\nend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"}]
}
