var documenterSearchIndex = {"docs":
[{"location":"examples/collapse3d.html#:-Water-collapse-3d","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"","category":"section"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"module collapse3d\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"Declare constant parameters","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"##physical\nconst dr = 5.0e-3          #average particle distance (decrease to make finer simulation)\nconst h = 2.0*dr           #size of kernel support\nconst rho0 = 1000.   \t   #fluid density\nconst m = rho0*dr^3        #particle mass\nconst c = 50.0             #numerical speed of sound\nconst g = -9.8*VECZ        #gravitational acceleration\nconst mu = 8.4e-4          #dynamic viscosity of water\nconst nu = 1.0e-4          #pressure stabilization\n\n##geometrical\nconst water_column_width = 0.142\nconst water_column_height = 0.293\nconst box_height = 0.35\nconst box_width = 0.584\nconst box_depth = 0.15\nconst wall_width = 2.5*dr\n\n##temporal\nconst dt = 0.1*h/c\nconst t_end = 0.5\nconst dt_frame = t_end/200\n\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"mutable struct Particle <: AbstractParticle\n\tx::RealVector #position\n\tv::RealVector #velocity\n\ta::RealVector #acceleration\n\tP::Float64 #pressure\n\trho::Float64 #density\n\tDrho::Float64 #rate of density\n\ttype::Float64 #particle_type\n\tParticle(x, type) = new(\n\t\tx, VEC0, VEC0,\n\t\t0.,\n\t\trho0, 0.,\n\t\ttype\n\t)\nend","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"Define geometry and make particles","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"function make_system()\n\tgrid = Grid(dr, :cubic)\n\tbox = Box(0., 0., 0., box_width, box_height, box_depth)\n\tfluid = Box(0., 0., 0., water_column_width, water_column_height, box_depth)\n\twalls = BoundaryLayer(box, grid, wall_width)\n\twalls = Specification(walls, x -> (x[2] < box_height))\n\tdomain = SmoothedParticles.boundarybox(walls)\n\tsys = ParticleSystem(Particle, domain, h)\n\tgenerate_particles!(sys, grid, fluid, x -> Particle(x, FLUID))\n\tgenerate_particles!(sys, grid, walls, x -> Particle(x, WALL))\n\treturn sys\nend","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"Define particle interactions","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"@inbounds function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\tker = m*rDwendland3(h,r)\n\tp.Drho += ker*(dot(p.x-q.x, p.v-q.v) + 2*nu*(p.rho-q.rho))\nend\n\nfunction find_pressure!(p::Particle)\n\tp.rho += p.Drho*dt\n\tp.Drho = 0.0\n\tp.P = c^2*(p.rho - rho0)\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tif p.type == FLUID\n\t\tker = m*rDwendland3(h,r)\n\t\tp.a += -ker*(p.P/rho0^2 + q.P/rho0^2)*(p.x - q.x)\n\t\tp.a += +2*ker*mu/rho0^2*(p.v - q.v)\n\tend\nend\n\nfunction move!(p::Particle)\n\tp.a = VEC0\n\tif p.type == FLUID\n\t\tp.x += dt*p.v\n\tend\nend\n\nfunction accelerate!(p::Particle)\n\tif p.type == FLUID\n\t\tp.v += 0.5*dt*(p.a + g)\n\tend\nend\n\nfunction energy(p::Particle)::Float64\n\tkinetic = 0.5*m*dot(p.v, p.v)\n\tpotential = -m*dot(g, p.x)\n\tinternal =  0.5*m*c^2*(p.rho - rho0)^2/rho0^2\n\treturn kinetic + potential + internal\nend","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"Put everything into a time loop","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"function main()\n\tsys = make_system()\n\tout = new_pvd_file(\"results/collapse3d\")\n    println(\"# of parts = \", length(sys.particles))\n\t#a modified Verlet scheme\n\t@time for k = 0 : Int64(round(t_end/dt))\n\t#move particles\n\t\tapply!(sys, move!)\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, find_pressure!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, accelerate!)\n\t\t#save data at selected frames\n\t\tif (k % Int64(round(dt_frame/dt)) == 0)\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\t@printf(\"E = %.6e\\n\", sum(energy, sys.particles))\n\t\t\t@printf(\"\\n\")\n\t\t\tsave_frame!(out, sys, :v, :P, :rho, :type)\n\t\tend\n\t\t#accelerate\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out)\nend ## function main\n\nend ## module","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"","category":"page"},{"location":"examples/collapse3d.html","page":"2: Water collapse 3d","title":"2: Water collapse 3d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/collapse_dry_implicit.html#:-Water-collapse-(implicit)","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"","category":"section"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"\t<img src='../assets/collapse_exp.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Simulation of a water column collapsing under its own weight onto dry bottom. Here with strictly incompressible approach (Projection method).","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"module collapse_dry_implicit\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles\nusing LinearAlgebra\nusing IterativeSolvers\nusing IncompleteLU\nusing Parameters","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Declare constant parameters","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"##kernel functions\nconst kernel = spline23\nconst Dkernel = Dspline23\nconst rDkernel = rDspline23\n\nconst dr = 2.0e-2         #average particle distance (decrease to make finer simulation)\nconst h = 2.8*dr          #size of kernel support\nconst rho0 = 1000.0       #fluid density\nconst g = -9.8*VECY       #gravitational acceleration\nconst mu = 8.4e-4     #dynamic viscosity\nconst m = dr^2*rho0       #particle mass\n\n##geometry parameters\nconst water_column_width = 1.0\nconst water_column_height = 2.0\nconst box_height = 3.0\nconst box_width = 4.0\nconst nlayers = 3.5 #number of wall layers\nconst wall_width = nlayers*dr\n\n##temporal parameters\nconst dt = h/40.0\nconst t_end = 1.0\nconst dt_frame = t_end/50\n\n##labels for particle types\nconst FLUID = 0.\nconst  WALL = 1.\nconst DUMMY = 2.","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"@with_kw mutable struct Particle <: AbstractParticle\n\tx::RealVector = VEC0 #position\n\tv::RealVector = VEC0 #velocity\n\ta::RealVector = VEC0 #acceleration\n\tP::Float64 = 0. #pressure\n\tdiv::Float64 = 0. #divergence of velocity\n\tL::Float64 = 0. #free surface identier\n\tL0::Float64 = 0.\n\ttype::Float64 #particle type\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Define geometry and create particles","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"function make_system()\n\tgrid = Grid(dr, :hexagonal)\n\tbox = Rectangle(0., 0., box_width, box_height)\n\tfluid = Rectangle(0., 0., water_column_width, water_column_height)\n\twalls = BoundaryLayer(box, grid, 1.2*dr)\n\twalls = Specification(walls, x -> (x[2] < box_height))\n\tdummy = BoundaryLayer(box, grid, nlayers*dr) - walls\n\tdummy = Specification(dummy, x -> (x[2] < box_height))\n\tdomain = Rectangle(-nlayers*dr, -nlayers*dr, 2*box_width, 3*box_height)\n\tsys = ParticleSystem(Particle, domain, h)\n\tgenerate_particles!(sys, grid, fluid, x -> Particle(x=x, type=FLUID))\n\tgenerate_particles!(sys, grid, walls, x -> Particle(x=x, type=WALL))\n\tgenerate_particles!(sys, grid, dummy, x -> Particle(x=x, type=DUMMY))\n\tcreate_cell_list!(sys)\n\tapply!(sys, find_L0!)\n\tLmax = maximum(p -> p.L0, sys.particles)\n\tParticleField(sys, :L0) .= Lmax\n\treturn sys\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Particle interactions","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"function initialize!(p::Particle)\n\tif p.type == FLUID\n\t\tp.x += dt*p.v\n\t\tp.v += dt*g\n\tend\n\tp.div = 0.\n\tp.L = 0.\nend\n\n@inbounds function viscous_force!(p::Particle, q::Particle, r::Float64)\n\tp.a += 2.0*m*mu*rDkernel(h,r)/rho0^2*(p.v - q.v)\nend\n\n@inbounds function find_div_and_L!(p::Particle, q::Particle, r::Float64)\n\tp.div += -SmoothedParticles.dot(p.x - q.x, p.v - q.v)*m*rDkernel(h,r)/rho0\n\tp.L += -2.0*m*rDkernel(h,r)/rho0^2\nend\n\n@inbounds function find_L0!(p::Particle, q::Particle, r::Float64)\n\tp.L0 += -2.0*m*rDkernel(h,r)/rho0^2\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tp.a -= m*rDkernel(h,r)*(p.P + q.P)/rho0^2*(p.x - q.x)\nend\n\nfunction accelerate!(p::Particle)\n\tif p.type == FLUID\n\t\tp.v += dt*p.a\n\tend\n\tp.a = VEC0\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Functions to build the linear system","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"function minus_laplace(p::Particle, q::Particle, r::Float64)::Float64\n\tif p == q\n\t\treturn p.type == FLUID ? max(p.L, p.L0) : p.L\n\tend\n\treturn 2.0*m*rDkernel(h,r)/rho0^2\nend\n\nfunction rhs(p::Particle)::Float64\n\treturn -p.div/dt\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"Time iteration","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"function main()\n\tsys = make_system()\n\tout_pvd = new_pvd_file(\"results/collapse_dry_implicit\")\n\tout_txt = open(\"results/collapse_dry_implicit/data.txt\", \"w\")\n\tP = ParticleField(sys, :P)\n\tfor k = 0 : Int64(round(t_end/dt))\n\t\tif (k %  Int64(round(dt_frame/dt)) == 0)\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\tprintln(\"# of particles = \", length(sys.particles))\n\t\t\tsave_frame!(out_pvd, sys, :v, :P, :type)\n\t\t\tdimless_time = string(k*dt*sqrt(-g[2]/water_column_height))\n\t\t\tleading_edge = maximum(p -> (p.type == FLUID ? p.x[1] - water_column_width : 0.), sys.particles)/water_column_height\n\t\t\twrite(out_txt, string(dimless_time)*\" \"*string(leading_edge)*\"\\n\")\n\t\tend\n\t\tapply!(sys, initialize!)\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, viscous_force!)\n\n\t\t##assemble linear system and solve for pressure\n\t\tapply!(sys, find_div_and_L!)\n\t\tA = assemble_matrix(sys, minus_laplace)\n\t\tb = assemble_vector(sys, rhs)\n\t\ttry\n\t\t\tP .= cg(A, b; Pl = ilu(A; τ = 5.0))\n\t\tcatch\n\t\t\tsave_pvd_file(out_pvd)\n\t\t\tclose(out_txt)\n\t\t\terror(\"Unable to solve linear system.\")\n\t\tend\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out_pvd)\n\tclose(out_txt)\nend\n\nend","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"","category":"page"},{"location":"examples/collapse_dry_implicit.html","page":"3: Water collapse (implicit)","title":"3: Water collapse (implicit)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"structs.html#Structs","page":"Structs","title":"Structs","text":"","category":"section"},{"location":"structs.html","page":"Structs","title":"Structs","text":"Modules = [SmoothedParticles]\nPages = [\"structs.jl\"]","category":"page"},{"location":"structs.html#SmoothedParticles.MAT0","page":"Structs","title":"SmoothedParticles.MAT0","text":"MAT0\n\nStatic 3x3 zero matrix.\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.MAT1","page":"Structs","title":"SmoothedParticles.MAT1","text":"MAT1\n\nStatic 3x3 identity matrix.\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.VEC0","page":"Structs","title":"SmoothedParticles.VEC0","text":"VEC0\n\nStatic zero vector. Equivalent to zero(RealVector).\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.VECX","page":"Structs","title":"SmoothedParticles.VECX","text":"VECX\n\nStatic cartesian basis vector in the X direction. Equivalent to RealVector(1.,0.,0.)\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.VECY","page":"Structs","title":"SmoothedParticles.VECY","text":"VECY\n\nStatic cartesian basis vector in the Y direction. Equivalent to RealVector(0.,1.,0.).\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.VECZ","page":"Structs","title":"SmoothedParticles.VECZ","text":"VECZ\n\nStatic cartesian basis vector in the Z direction. Equivalent to RealVector(0.,0.,1.).\n\n\n\n\n\n","category":"constant"},{"location":"structs.html#SmoothedParticles.AbstractParticle","page":"Structs","title":"SmoothedParticles.AbstractParticle","text":"AbstractParticle\n\nAbstract supertype for smoothed particles. Any structure with AbstractParticle supertype is expected to:\n\nbe mutable\nhave field x::RealVector (particle position)\n\n\n\n\n\n","category":"type"},{"location":"structs.html#SmoothedParticles.ParticleField","page":"Structs","title":"SmoothedParticles.ParticleField","text":"ParticleField(sys::ParticleSystem, varS::Symbol)\n\nCreates an abstract array whose n-th element is the value of scalar varS of n-th particle in sys.\n\nwarning: Warning\nThe indentity of n-th particle in ParticleSystem may change when particles are added or removed.\n\n\n\n\n\n","category":"type"},{"location":"structs.html#SmoothedParticles.ParticleSystem","page":"Structs","title":"SmoothedParticles.ParticleSystem","text":"ParticleSystem(T::Type, domain::Shape, h::Float64)\n\nStruct that contains all vital information about the simulation. The constructor specifies that:\n\nthe simulation will use particles of type T <: AbstractParticle,\nParticles outside of the 'domain' can be disregarded (and will be automatically removed).\nParticles are considered neighbours if their distance is less than h.\n\nPlease, do not make 'domain' unnecessarily large (has negative impact on performance).\n\n\n\n\n\n","category":"type"},{"location":"structs.html#SmoothedParticles.RealVector","page":"Structs","title":"SmoothedParticles.RealVector","text":"RealVector(x1::Float64, x2::Float64, x3::Float64)\n\nStatic Float64 vector with 3 elements.\n\n\n\n\n\n","category":"type"},{"location":"structs.html#SmoothedParticles.Shape","page":"Structs","title":"SmoothedParticles.Shape","text":"Shape\n\nSupertype for geometrical shapes.\n\n\n\n\n\n","category":"type"},{"location":"examples/cylinder.html#:-Flow-around-cylinder","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"","category":"section"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"\t<img src='../assets/cylinder.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"A simulation of flow around cylinder.\nAll parameters of this benchmark can be found\n <a href=\"http://www.mathematik.tu-dortmund.de/~featflow/en/benchmarks/cfdbenchmarking/flow/dfg_benchmark1_re20.html\">here.</a>","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"module cylinder\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles\n\nconst folder_name = \"results/cylinder\"","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"Declare constants","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"#geometry parameters\nconst dr = 3.9e-3 \t\t     #average particle distance (decrease to make finer simulation)\nconst h = 2.5*dr\t\t     #size of kernel support\nconst chan_l = 0.8 #2.2      #length of the channel\nconst chan_w = 0.41          #width of the channel\nconst cyl1 = dr*round(0.2/dr)  #x coordinate of the cylinder\nconst cyl2 = dr*round(0.2/dr)  #y coordinate of the cylinder\nconst cyl_r = 0.05           #radius of the cylinder\nconst wall_w = 2.5*dr        #width of the wall\nconst inflow_l = 3.0*dr      #width of inflow layer\n\n\n#physical parameters\nconst U_max = 1.0       #maximum inflow velocity\nconst rho0 = 1.0\t\t#referential fluid density\nconst m = rho0*dr^2\t\t#particle mass\nconst c = 40.0*U_max\t#numerical speed of sound\nconst mu = 1.0e-3\t\t#dynamic viscosity of water\nconst nu = 1.0e-3\t\t#pressure stabilization\nconst P0 = 1.2          #anti-clump term\n\n#temporal parameters\nconst dt = 0.2*h/c      #time step\nconst dt_frame = 0.02    #how often data is saved\nconst t_end = 5.0      #end of simulation\nconst t_acc = 0.5      #time to accelerate to full speed\n\n#particle types\nconst FLUID = 0.\nconst WALL = 1.\nconst INFLOW = 2.\nconst OBSTACLE = 3.","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"mutable struct Particle <: AbstractParticle\n    x::RealVector #position\n    v::RealVector #velocity\n    a::RealVector #acceleration\n    rho::Float64 #density\n    Drho::Float64 #rate of density\n    P::Float64 #pressure\n    type::Float64 #particle type\n    Particle(x,type) = begin\n        return new(x, VEC0, VEC0, rho0, 0., 0., type)\n    end\nend\n\nfunction make_system()\n    domain = Rectangle(-inflow_l, -10*wall_w, chan_l, chan_w + 10*wall_w)\n    sys = ParticleSystem(Particle, domain, h)\n    grid = Grid(dr, :square)\n\n    #define geometry\n    obstacle = Circle(cyl1, cyl2, cyl_r)\n    pipe = Rectangle(-inflow_l, 0., chan_l, chan_w)\n    wall = BoundaryLayer(pipe, grid, wall_w)\n    wall = Specification(wall, x -> (-inflow_l <= x[1] <= chan_l))\n    inflow = Specification(pipe - obstacle, x -> x[1] < 0.0)\n    fluid = Specification(pipe - obstacle, x -> x[1] >= 0.0)\n\n    #generate particles\n    generate_particles!(sys, grid, fluid, x -> Particle(x, FLUID))\n    generate_particles!(sys, grid, inflow, x -> Particle(x, INFLOW))\n    generate_particles!(sys, grid, wall, x -> Particle(x, WALL))\n    generate_particles!(sys, grid, obstacle, x -> Particle(x, OBSTACLE))\n\n    return sys\nend\n\n#Inflow function\n\nfunction set_inflow_speed!(p::Particle, t::Float64)\n    if p.type == INFLOW\n        s = min(1.0, t/t_acc)\n        v1 = 4.0*s*U_max*p.x[2]*(chan_w - p.x[2])/chan_w^2\n        p.v = v1*VECX\n    end\nend\n\n#Define interactions between particles\n\n@inbounds function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\tker = m*rDwendland2(h,r)\n\tp.Drho += ker*(dot(p.x-q.x, p.v-q.v) + 2*nu*(p.rho-q.rho))\nend\n\nfunction find_pressure!(p::Particle)\n\tp.rho += p.Drho*dt\n\tp.Drho = 0.0\n\tp.P = rho0*c^2*((p.rho/rho0)^7 - 1.0)/7\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tker = m*rDwendland2(h,r)\n\tp.a += -ker*(p.P/rho0^2 + q.P/rho0^2)*(p.x - q.x)\n\tp.a += +2*ker*mu/rho0^2*(p.v - q.v)\n    ker = m*rDwendland2(h/2,r)\n    p.a += -2*ker*P0/rho0^2*(p.x - q.x)\nend\n\nfunction move!(p::Particle)\n\tp.a = VEC0\n\tif p.type == FLUID || p.type == INFLOW\n\t\tp.x += dt*p.v\n\tend\nend\n\nfunction accelerate!(p::Particle)\n\tif p.type == FLUID\n\t\tp.v += 0.5*dt*p.a\n\tend\nend\n\nfunction add_new_particles!(sys::ParticleSystem)\n    new_particles = Particle[]\n    for p in sys.particles\n        if p.type == INFLOW && p.x[1] >= 0\n            p.type = FLUID\n            x = p.x - inflow_l*VECX\n            push!(new_particles, Particle(x, INFLOW))\n        end\n    end\n    append!(sys.particles, new_particles)\nend\n\nfunction calculate_force(sys::ParticleSystem)::RealVector\n    F = VEC0\n    for p in sys.particles\n        if p.type == OBSTACLE\n            F += m*p.a\n        end\n    end\n    C = 2.0*F/((2.0*U_max/3.0)^2*(2.0*cyl_r))\n    return C\nend\n\nfunction  main()\n    sys = make_system()\n\tout = new_pvd_file(folder_name)\n    C_D = Float64[]\n    C_L = Float64[]\n\n    #a modified Verlet scheme\n\tfor k = 0 : Int64(round(t_end/dt))\n        t = k*dt\n        apply!(sys, move!)\n        add_new_particles!(sys)\n        for p in sys.particles\n            set_inflow_speed!(p,t)\n        end\n        create_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n        apply!(sys, find_pressure!)\n        apply!(sys, internal_force!)\n        apply!(sys, accelerate!)\n        #save data at selected frames\n        if (k %  Int64(round(dt_frame/dt)) == 0)\n            @show t\n            C = calculate_force(sys)\n            push!(C_D, C[1])\n            push!(C_L, C[2])\n            save_frame!(out, sys, :v, :P, :type)\n        end\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out)\n    println()\n    C_SPH = RealVector(sum(C_D[end-9:end]/10), sum(C_L[end-9:end]/10), 0.)\n    C_exact = RealVector(5.57953523384, 0.010618948146, 0.)\n    relative_error = norm(C_SPH - C_exact)/norm(C_exact)\n    @show C_SPH\n    @show C_exact\n    println(\"relative error = \",100*relative_error,\"%\")\nend\n\nend","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"","category":"page"},{"location":"examples/cylinder.html","page":"5: Flow around cylinder","title":"5: Flow around cylinder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"IO.html#Input/Output","page":"Input/Output","title":"Input/Output","text":"","category":"section"},{"location":"IO.html","page":"Input/Output","title":"Input/Output","text":"Modules = [SmoothedParticles]\nPages = [\"IO.jl\"]","category":"page"},{"location":"IO.html#SmoothedParticles.DataStorage","page":"Input/Output","title":"SmoothedParticles.DataStorage","text":"DataStorage\n\nStorage for paraview input/output.\n\n\n\n\n\n","category":"type"},{"location":"IO.html#SmoothedParticles.new_pvd_file-Tuple{String}","page":"Input/Output","title":"SmoothedParticles.new_pvd_file","text":"new_pvd_file(path::String)::DataStorage\n\nCteates new DataStorage in a given path.\n\n\n\n\n\n","category":"method"},{"location":"IO.html#SmoothedParticles.save_frame!-Tuple{SmoothedParticles.DataStorage, ParticleSystem, Vararg{Symbol, N} where N}","page":"Input/Output","title":"SmoothedParticles.save_frame!","text":"save_frame!(data::DataStorage, sys::ParticleSystem, vars::DataField...)\n\nInserts one time frame into a DataStorage that includes all vars... as fields.\n\n\n\n\n\n","category":"method"},{"location":"IO.html#SmoothedParticles.save_pvd_file-Tuple{SmoothedParticles.DataStorage}","page":"Input/Output","title":"SmoothedParticles.save_pvd_file","text":"save_pvd_file(data::DataStorage)\n\nSaves and closes DataStorage.\n\n\n\n\n\n","category":"method"},{"location":"examples/static_container.html#:-Static-container","page":"1: Static container","title":"1: Static container","text":"","category":"section"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"\t<img src='../assets/static_container.png' width=\"50%\" height=\"50%\" alt='missing' /><br>","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"This is a hello world example of SPH. Simulates motionless fluid in uniform gravitational field. Things that may be tested by this benchmark are:","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"walls,\nzero point stability of time integrator,\nstability of free surface.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Let us begin by declaring a module and importing some stuff.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"module static_container\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Declare constant parameters","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"const dr = 3.0e-3       #average particle distance\nconst h = 1.8*dr        #size of kernel support\nconst rho0 = 1000.0     #fluid density\nconst m = rho0*dr^2     #particle mass\nconst c = 40.0          #numerical speed of sound\nconst g = -VECY         #gravitational acceleration\nconst mu = 8.4e-4       #dynamic viscosity of water\n\nconst water_depth = 0.14\nconst box_height = 0.18\nconst box_width = 0.14\nconst wall_width = 2.5*dr\n\n##temporal parameters\nconst dt = 0.2*h/c\nconst dt_frame = 0.1\nconst t_end = 0.5\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"mutable struct Particle <: AbstractParticle\n\tx::RealVector #position\n\tv::RealVector #velocity\n\ta::RealVector #acceleration\n\trho::Float64 #density\n\ttype::Float64 #particle type\n\tParticle(x::RealVector, type::Float64) = new(\n\t\tx,\n\t\tVEC0,\n\t\tVEC0,\n\t\trho0,\n\t\ttype\n\t)\nend\n\n\n##dependance of pressure on density\nfunction pressure(p::Particle)\n\treturn c^2*(p.rho - rho0)\nend\n\n##fluid identier\nfunction isfluid(p::Particle)::Float64\n\treturn Float64(p.type == FLUID)\nend","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Define geometry and make particles","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"function make_system()\n\tgrid = Grid(dr, :square)\n\tbox = Rectangle(0., 0., box_width, box_height)\n\tfluid = Rectangle(0., 0., box_width, water_depth)\n\twalls = BoundaryLayer(box, grid, wall_width)\n\tsys = ParticleSystem(Particle, box + walls, h)\n\tgenerate_particles!(sys, grid, fluid, x -> Particle(x, FLUID))\n\tgenerate_particles!(sys, grid, walls, x -> Particle(x,  WALL))\n\treturn sys\nend","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Define particle interactions","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"@inbounds function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\tp.rho += dt*dot(p.x-q.x, p.v-q.v)*m*rDwendland2(h,r)\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tif p.type == FLUID\n\t\tker = m*rDwendland2(h,r)\n\t\t#pressure force\n\t\tp.a += -ker*(pressure(p)/p.rho^2 + pressure(q)/q.rho^2)*(p.x - q.x)\n\t\t#viscous force\n\t\tp.a += ker*2*mu/(p.rho*q.rho)*(p.v - q.v)\n\tend\nend\n\nfunction update!(p::Particle)\n\tp.v += dt*isfluid(p)*(p.a + g)\n\tp.x += dt*isfluid(p)*p.v\n\tp.a = VEC0\nend","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"Put everything into a time loop","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"function main()\n\tsys = make_system()\n\t@show sys.key_max\n\tout = new_pvd_file(\"results/static_container\")\n\tfor k = 0 : Int64(round(t_end/dt))\n\t\tif (k %  Int64(round(dt_frame/dt)) == 0)\n\t\t\tprintln(\"# of particles = \", length(sys.particles))\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\tsave_frame!(out, sys, :rho, :type, :v)\n\t\tend\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, update!)\n\tend\n\tsave_pvd_file(out)\nend ##function main()\n\nend ##module","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"","category":"page"},{"location":"examples/static_container.html","page":"1: Static container","title":"1: Static container","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/drop.html#:-Surface-tension-simulation-in-3D","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"","category":"section"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"WARNING: Takes very long time to compute (hours on cluster for 0.1 second)","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"module drop\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles\nusing Parameters","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"Declare constant parameters","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"##geometrical\nconst dr = 3.7e-5          #average particle distance (decrease to make finer simulation)\nconst h = 3.0*dr           #size of kernel support\nconst rad = 1e-3\nconst deskw= 0.9h\n\n##physical\nconst rho0 = 1000.   \t   #fluid density\nconst m = rho0*dr^3        #particle mass\nconst mu = 0.1         #dynamic viscosity of water\nconst beta = 72e-3      #surface tension\nconst vol = dr^3\nconst g = -9.8*VECZ\nconst c = 10.0*max(sqrt(beta/rho0/dr), sqrt(4*norm(g)*rad))            #numerical speed of sound\n\n##temporal\nconst dt = 0.3*dr/c\nconst t_end = 2e-5\n#const t_end = 0.02\nconst dt_frame = max(t_end/50,dt)\n\n#artificial\nconst s0 = dr*dr/100\n\nconst FLUID = 0.\nconst SOLID = 1.\n\n@with_kw mutable struct Particle <: AbstractParticle\n\tx::RealVector #position\n\tv::RealVector = VEC0 #velocity\n\ta::RealVector = VEC0 #acceleration\n\tP::Float64 = 0. #pressure\n\trho::Float64 = 0. #density\n    rho0::Float64 = 0.\n    n::RealVector = VEC0 #normal\n    type::Float64\nend","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"Define geometry and make particles","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"function make_system()\n\tgrid = Grid(dr, :cubic)\n    drop = Ball(0., 0., rad + h, rad)\n    desk = Box(-2rad, -2rad, -deskw, 2rad, 2rad, 0.)\n    dom = Box(-2rad, -2rad, -2deskw, 2rad, 2rad, 2.2rad)\n    sys = ParticleSystem(Particle, dom, h)\n\tgenerate_particles!(sys, grid, drop, x -> Particle(x=x, type=FLUID))\n    generate_particles!(sys, grid, desk, x -> Particle(x=x, type=SOLID))\n\treturn sys\nend","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"Define particle interactions","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"@inbounds function find_n!(p::Particle, q::Particle, r::Float64)\n    p.n += 2*vol*vol*rDwendland3(h,r)*(p.x - q.x)\nend\n\nfunction reset_n!(p::Particle)\n    p.n = VEC0\nend\n\nfunction normalize_n!(p::Particle)\n    s = norm(p.n)\n    p.n /= (s + s0)\nend\n\n@inbounds function find_rho!(p::Particle, q::Particle, r::Float64)\n    p.rho += m*wendland3(h,r)\nend\n\n@inbounds function find_rho0!(p::Particle, q::Particle, r::Float64)\n    p.rho0 += m*wendland3(h,r)\nend\n\nfunction find_pressure!(p::Particle)\n\tp.P = c^2*(p.rho - p.rho0)\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\t\tker = m*rDwendland3(h,r)\n        #pressure\n\t\tp.a += -ker*(p.P/rho0^2 + q.P/rho0^2)*(p.x - q.x)\n\t\t#viscosity\n        p.a += 2*ker*mu/rho0^2*(p.v - q.v)\n        #surface tension\n        p.a -= 2*beta/rho0^2*(\n            (m*DDwendland3(h,r)-ker)*dot(p.x-q.x, p.n-q.n)*(p.x-q.x)/(r^2 + s0)\n            +ker*(p.n-q.n)\n        )\nend\n\nfunction reset_a!(p::Particle)\n    p.a = VEC0\nend\n\nfunction reset_rho!(p::Particle)\n    p.rho = 0.0\nend\n\nfunction move!(p::Particle)\n\tp.x += (p.type==FLUID)*dt*p.v\nend\n\nfunction accelerate!(p::Particle)\n\tp.v += (p.type==FLUID)*0.5*dt*(p.a+g)\nend\n\nfunction energy(p::Particle)::Float64\n\tkinetic = 0.5*m*dot(p.v, p.v)\n\tinternal =  0.5*m*c^2*(p.rho - p.rho0)^2/rho0^2\n    s = norm(p.n)\n    tensile = beta*(s - s0*log(s/s0+1))\n    potential = m*dot(p.x, -g)\n    return kinetic + internal + tensile + potential\nend","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"Put everything into a time loop","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"function verlet_step!(sys)\n    apply!(sys, accelerate!)\n    apply!(sys, move!)\n    create_cell_list!(sys)\n    apply!(sys, reset_rho!)\n    apply!(sys, find_rho!, self = true)\n    apply!(sys, reset_n!)\n    apply!(sys, find_n!, self = true)\n    apply!(sys, normalize_n!)\n    apply!(sys, find_pressure!)\n    apply!(sys, reset_a!)\n    apply!(sys, internal_force!)\n    apply!(sys, accelerate!)\nend\n\nfunction save_results!(out, sys, k)\n    @printf(\"t = %.6e\\n\", k*dt)\n    apply!(sys, reset_n!)\n    apply!(sys, find_n!, self = true)\n    save_frame!(out, sys, :v, :a, :P, :rho, :rho0, :type, :n)\nend\n\n\nfunction main()\n    E0 = 0.0\n\tsys = make_system()\n\tout = new_pvd_file(\"results/drop\")\n    #initialization\n    create_cell_list!(sys)\n    apply!(sys, find_rho0!, self = true)\n    apply!(sys, find_rho!, self = true)\n    apply!(sys, find_pressure!)\n    apply!(sys, find_n!)\n    apply!(sys, normalize_n!)\n    apply!(sys, internal_force!)\n\tfor k in 0 : Int64(round(t_end/dt))\n        verlet_step!(sys)\n        if (k %  Int64(round(dt_frame/dt)) == 0)\n            save_results!(out, sys, k)\n            E = sum(energy, sys.particles)\n            if k == 0\n                E0 = E\n            end\n            E = E - E0\n            @show E\n            println(\"# of part. = \", length(sys.particles))\n            println()\n        end\n\tend\n\tsave_pvd_file(out)\nend ## function main\n\n\nend ## module","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"","category":"page"},{"location":"examples/drop.html","page":"5: Surface tension simulation in 3D","title":"5: Surface tension simulation in 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"grids.html#Grids","page":"Grids","title":"Grids","text":"","category":"section"},{"location":"grids.html","page":"Grids","title":"Grids","text":"Modules = [SmoothedParticles]\nPages = [\"grids.jl\"]","category":"page"},{"location":"grids.html#SmoothedParticles.Grid-Tuple{Float64, Symbol}","page":"Grids","title":"SmoothedParticles.Grid","text":"Grid(dr::Float64, symm::Symbol)::Grid\n\nDefine a grid with a given characterstic length textdr and symmetry type symm. Characterstic length means that one particle occupies a volume textdr^n, where n is the dimension. Supported symmetry types are\n\n2D:\n\n:square (square grid)\n:hexagonal (hexagrid, dual of isometric grid)\n:vogel (grid based on Vogel's spiral)\n\n3D:\n\n:cubic (cubic grid)\n\n\n\n\n\n","category":"method"},{"location":"grids.html#SmoothedParticles.generate_particles!-Tuple{ParticleSystem, Grid, Shape, Function}","page":"Grids","title":"SmoothedParticles.generate_particles!","text":"generate_particles!(sys::ParticleSystem,\n                    grid::Grid,\n                    geometry::Shape,\n                    constructor::Function)\n\nCreate particles using constructor(x::RealVector)::AbstractParticle at every grid point inside a given shape.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#Kernels","page":"Kernels","title":"Kernels","text":"","category":"section"},{"location":"kernels.html","page":"Kernels","title":"Kernels","text":"Smoothing kernels are the guts of SPH. They measure the strength of interaction between neighbouring particles based on their distance. They are also used to interpolate particle variables into continuous Eulerian fields.","category":"page"},{"location":"kernels.html","page":"Kernels","title":"Kernels","text":"Modules = [SmoothedParticles]\nPages = [\"kernels.jl\"]","category":"page"},{"location":"kernels.html#SmoothedParticles.Dspline23-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.Dspline23","text":"Dspline23(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.Dspline24-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.Dspline24","text":"Dspline24(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.Dwendland2-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.Dwendland2","text":"Dwendland2(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.Dwendland3-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.Dwendland3","text":"Dwendland3(h::Float64, r::Float64)::Float64\n\nReturns fractextdwtextdr(r), the first derivative of a 3d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.rDspline23-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.rDspline23","text":"rDspline23(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.rDspline24-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.rDspline24","text":"rDspline24(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.rDwendland2-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.rDwendland2","text":"rDwendland2(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.rDwendland3-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.rDwendland3","text":"rDwendland3(h::Float64, r::Float64)::Float64\n\nReturns frac1rfractextdwtextdr(r), the reduced first derivative of a 3d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.spline23-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.spline23","text":"spline23(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d cubic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.spline24-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.spline24","text":"spline24(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d quartic spline w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.wendland2-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.wendland2","text":"wendland2(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 2d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"kernels.html#SmoothedParticles.wendland3-Tuple{Float64, Float64}","page":"Kernels","title":"SmoothedParticles.wendland3","text":"wendland3(h::Float64, r::Float64)::Float64\n\nReturns w(r), the value of a 3d quintic Wendland kernel w with support radius h. Integrates to unity.\n\n\n\n\n\n","category":"method"},{"location":"core.html#Core","page":"Core","title":"Core","text":"","category":"section"},{"location":"core.html","page":"Core","title":"Core","text":"Modules = [SmoothedParticles]\nPages = [\"core.jl\"]","category":"page"},{"location":"core.html#SmoothedParticles.apply!-Tuple{ParticleSystem, Function}","page":"Core","title":"SmoothedParticles.apply!","text":"apply!(sys::ParticleSystem, action!::Function; self::Bool = false)\n\nCalls either apply_unary! or apply_binary! according to the signature of action!. If self == true, then particle self-interaction for binary operator is allowed.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.apply_binary!-Tuple{ParticleSystem, Function}","page":"Core","title":"SmoothedParticles.apply_binary!","text":"apply_binary!(sys::ParticleSystem, action!::Function)\n\nApply a binary operator action!(p::T, q::T, r::Float64) between any two neighbouring particles p, q in sys::ParticleSystem{T}. Value r is their mutual distance. This excludes particle pairs with distance greater than sys.h. This has linear complexity in number of particles and runs in parallel.\n\nwarning: Warning\nModifying second particle q within action! can lead to race condition, so do not do this. Also, make sure that result will not depend on the order of particle evaluation, which is implementation-specific.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.apply_unary!-Tuple{ParticleSystem, Function}","page":"Core","title":"SmoothedParticles.apply_unary!","text":"apply_unary!(sys::ParticleSystem, action!::Function)\n\nApply a unary operator action!(p::T) on every particle p in sys::ParticleSystem{T}.  This has linear complexity in number of particles and runs in parallel.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.assemble_matrix-Tuple{ParticleSystem, Function}","page":"Core","title":"SmoothedParticles.assemble_matrix","text":"assemble_matrix(sys::ParticleSystem, func::Function)::SparseMatrixCSC{Float64}\n\nFor given function func(p::T, q::T)::Float64 where T <: AbstractParticle, assemble a sparse matrix mathbbA, such that\n\n\tA_ij = textfunc(p_i p_j r_ij)\n\nwhere p_i, p_j are respectively the i-th and j-th particle in sys::ParticleSystem{T} and r_ij is their mutual distance. This assumes that A_ij = 0 for r_ij  h.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.assemble_vector-Tuple{ParticleSystem, Function}","page":"Core","title":"SmoothedParticles.assemble_vector","text":"assemble_vector(sys::ParticleSystem, func::Function)::Vector{Float64}\n\nFor given function func(q::T)::Float64 where T <: AbstractParticle, assemble a vector mathbfv, such that \n\n\tv_i =  textfunc(p_i)\n\nwhere p_i is the i-th particle in sys::ParticleSystem{T}.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.create_cell_list!-Tuple{ParticleSystem}","page":"Core","title":"SmoothedParticles.create_cell_list!","text":"create_cell_list!(sys::ParticleSystem)\n\nCreate the cell list for given particle system sys. This function should be always called after updating positions. Without updated cell list, applying binary particle operators or assembling matrices will lead to incorrect results.\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.sum-Tuple{ParticleSystem, Function, AbstractParticle}","page":"Core","title":"SmoothedParticles.sum","text":"sum(sys::ParticleSystem, func::Function, x::RealVector)::Float64\n\nFor given function func(p::T, q::T, r::Float64)::Float64 where T <: AbstractParticle and particle p it returns the sum\n\n\tsum_q in textsysparticles textfunc(p q r)\n\n\n\n\n\n","category":"method"},{"location":"core.html#SmoothedParticles.sum-Tuple{ParticleSystem, Function, StaticArrays.SVector{3, Float64}}","page":"Core","title":"SmoothedParticles.sum","text":"sum(sys::ParticleSystem, func::Function, x::RealVector)::Float64\n\nFor given function func(p::T, r::Float64)::Float64 where T <: AbstractParticle it returns the sum\n\n\tsum_p in textsysparticles textfunc(p sqrt(px - x)^2 + (py - y)^2)\n\nThis can be useful if one needs to compute SPH interpolation at a point which is not occupied by a particle.\n\n\n\n\n\n","category":"method"},{"location":"geometry.html#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"geometry.html","page":"Geometry","title":"Geometry","text":"Modules = [SmoothedParticles]\nPages = [\"geometry.jl\"]","category":"page"},{"location":"geometry.html#SmoothedParticles.Ball","page":"Geometry","title":"SmoothedParticles.Ball","text":"Ball(x1::Float64, x2::Float64, x3::Float64, r::Float64) <: Shape\n\nDefine a ball by specifying the center (x1, x2, x3) and the radius r.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.BooleanDifference","page":"Geometry","title":"SmoothedParticles.BooleanDifference","text":"BooleanDifference(s1::Shape, s2::Shape) <: Shape\n\nDefine a shape as difference of two shapes. Equivalent to s1 - s2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.BooleanIntersection","page":"Geometry","title":"SmoothedParticles.BooleanIntersection","text":"BooleanIntersection(s1::Shape, s2::Shape) <: Shape\n\nDefine a shape as intersection of two shapes. Equivalent to s1 * s2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.BoundaryLayer","page":"Geometry","title":"SmoothedParticles.BoundaryLayer","text":"BoundaryLayer(s::Shape, grid::Grid, width::Float64) <: Shape\n\nCreates a layer of certain width around shape s. More specifically, a point is inside boundary layer if it is not in s and at the same time has distance less than width to at least one point on grid in s.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Box","page":"Geometry","title":"SmoothedParticles.Box","text":"Box(x1_min::Float64, x2_min::Float64, x3_min::Float64,\n    x1_max::Float64, x2_max::Float64, x3_max::Float64)::Shape\n\nDefines a box specified by two corners.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Circle","page":"Geometry","title":"SmoothedParticles.Circle","text":"Circle(x1::Float64, x2::Float64, r::Float64) <: Shape\n\nDefine a circle by specifying the center (x1, x2) and the radius r.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Ellipse","page":"Geometry","title":"SmoothedParticles.Ellipse","text":"Ellipse(x1::Float64, x2::Float64, r1::Float64, r2::Float64) <: Shape\n\nDefine an ellipse by specifying the center (x1, x2) and semi-major/minor axes r1, r2.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Specification","page":"Geometry","title":"SmoothedParticles.Specification","text":"Specification(s::Shape, f::Function) <: Shape\n\nDefine a shape of all x in s, such that f(x) == true.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Transform","page":"Geometry","title":"SmoothedParticles.Transform","text":"Transform(s::Shape; A::RealMatrix = MAT1, b::RealVector = VEC0)\n\nDefine shape as a linear transform x to Ax + b applied to shape s.\n\n\n\n\n\n","category":"type"},{"location":"geometry.html#SmoothedParticles.Rectangle-NTuple{4, Float64}","page":"Geometry","title":"SmoothedParticles.Rectangle","text":"Rectangle(x1_min, x2_min, x1_max, x2_max) <: Shape\n\nDefine a rectangle by specifying bottom left and top right corner.\n\n\n\n\n\n","category":"method"},{"location":"examples/collapse_dry.html#:-Water-collapse-(explicit)","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"","category":"section"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"\t<img src='../assets/collapse_exp.png' alt='missing' width=\"50%\" height=\"50%\" /><br>","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Simulation of a water column collapsing under its own weight onto dry bottom. This is, where SPH is more useful than typical mesh-based methods","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"module collapse_dry\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles\nusing CSV\nusing DataFrames","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Declare constant parameters","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"##physical\nconst dr = 2.0e-2          #average particle distance (decrease to make finer simulation)\nconst h = 3.0*dr           #size of kernel support\nconst rho0 = 1000.   \t   #fluid density\nconst m = rho0*dr^2        #particle mass\nconst c = 50.0             #numerical speed of sound\nconst g = -9.8*VECY        #gravitational acceleration\nconst mu = 8.4e-4          #dynamic viscosity of water\nconst nu = 1.0e-4          #pressure stabilization\n\n##geometrical\nconst water_column_width = 1.0\nconst water_column_height = 2.0\nconst box_height = 3.0\nconst box_width = 4.0\nconst wall_width = 2.5*dr\n\n##temporal\nconst dt = 0.1*h/c\nconst t_end = 1.0\nconst dt_frame = t_end/50\n\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"mutable struct Particle <: AbstractParticle\n\tx::RealVector #position\n\tv::RealVector #velocity\n\ta::RealVector #acceleration\n\tP::Float64 #pressure\n\trho::Float64 #density\n\tDrho::Float64 #rate of density\n\ttype::Float64 #particle_type\n\tParticle(x, type) = new(\n\t\tx, VEC0, VEC0,\n\t\t0.,\n\t\trho0, 0.,\n\t\ttype\n\t)\nend","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Define geometry and make particles","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"function make_system()\n\tgrid = Grid(dr, :square)\n\tbox = Rectangle(0., 0., box_width, box_height)\n\tfluid = Rectangle(0., 0., water_column_width, water_column_height)\n\twalls = BoundaryLayer(box, grid, wall_width)\n\twalls = Specification(walls, x -> (x[2] < box_height))\n\tsys = ParticleSystem(Particle, box + walls, h)\n\tgenerate_particles!(sys, grid, fluid, x -> Particle(x, FLUID))\n\tgenerate_particles!(sys, grid, walls, x -> Particle(x, WALL))\n\treturn sys\nend","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Define particle interactions","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"@inbounds function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\tker = m*rDwendland2(h,r)\n\tp.Drho += ker*(dot(p.x-q.x, p.v-q.v) + 2*nu*(p.rho-q.rho))\nend\n\nfunction find_pressure!(p::Particle)\n\tp.rho += p.Drho*dt\n\tp.Drho = 0.0\n\tp.P = c^2*(p.rho - rho0)\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tif p.type == FLUID\n\t\tker = m*rDwendland2(h,r)\n\t\tp.a += -ker*(p.P/rho0^2 + q.P/rho0^2)*(p.x - q.x)\n\t\tp.a += +2*ker*mu/rho0^2*(p.v - q.v)\n\tend\nend\n\nfunction move!(p::Particle)\n\tp.a = VEC0\n\tif p.type == FLUID\n\t\tp.x += dt*p.v\n\tend\nend\n\nfunction accelerate!(p::Particle)\n\tif p.type == FLUID\n\t\tp.v += 0.5*dt*(p.a + g)\n\tend\nend\n\nfunction energy(p::Particle)::Float64\n\tkinetic = 0.5*m*dot(p.v, p.v)\n\tpotential = -m*dot(g, p.x)\n\tinternal =  0.5*m*c^2*(p.rho - rho0)^2/rho0^2\n\treturn kinetic + potential + internal\nend\n\nfunction compute_max(sys::ParticleSystem)::NTuple{2,Float64}\n\tH = -Inf\n\tX = -Inf\n\tfor p in sys.particles\n\t\tif p.type == FLUID && p.x[1] > X\n\t\t\tX = p.x[1]\n\t\tend\n\t\tif p.type == FLUID && p.x[1] > 2*h && p.x[2] > H\n\t\t\tH = p.x[2]\n\t\tend\n\tend\n\treturn (X-1.0,0.5*H)\nend","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"Put everything into a time loop","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"function main()\n\tts = []\n\tXs = []\n\tHs = []\n\tsys = make_system()\n\tout = new_pvd_file(\"results/collapse_dry\")\n\t#a modified Verlet scheme\n\t@time for k = 0 : Int64(round(t_end/dt))\n\t#move particles\n\t\tapply!(sys, move!)\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, find_pressure!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, accelerate!)\n\t\t#save data at selected frames\n\t\tif (k % Int64(round(dt_frame/dt)) == 0)\n\t\t\t@printf(\"t = %.6e\\n\", k*dt)\n\t\t\t@printf(\"E = %.6e\\n\", sum(energy, sys.particles))\n\t\t\t@printf(\"\\n\")\n\t\t\t(X, H) = compute_max(sys)\n\t\t\tpush!(Xs, X)\n\t\t\tpush!(Hs, H)\n\t\t\tpush!(ts, k*dt*sqrt(-2*g[2]))\n\t\t\tsave_frame!(out, sys, :v, :P, :rho, :type)\n\t\tend\n\t\t#accelerate\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out)\n\tdf = DataFrame(time = ts, X = Xs, H = Hs)\n\tCSV.write(\"results/collapse_dry/data.csv\", df)\nend ## function main\n\nend ## module","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"","category":"page"},{"location":"examples/collapse_dry.html","page":"2: Water collapse (explicit)","title":"2: Water collapse (explicit)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cavity_flow.html#:-Lid-driven-cavity","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"","category":"section"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"module cavity_flow\n\nusing Printf\ninclude(\"../src/SmoothedParticles.jl\")\nusing .SmoothedParticles","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Declare const parameters (all dims in SI)","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"##geometrical/physical parameters\nconst Re = 100.0                #Reynolds number\nconst llid = 0.2                #length of the lid\nconst mu = 8.4e-4               #viscosity of water\nconst rho0 = 1.0e+3             #density of water\nconst vlid = mu*Re/(rho0*llid)     #flow speed of the lid\nconst dr = llid/70 \t\t        #average particle distance\nconst h = 2.2*dr\t\t        #size of kernel support\nconst m = rho0*dr^2             #particle mass\nconst c = 10*vlid\t\t\t#numerical speed of sound\nconst wwall = h\n\n##temporal parameters\nconst dt = 0.2*h/c              #numerical time-step\nconst dt_frame = 20.           #how often save data\nconst t_end = 2000.            #end of simulation\n\n##particle types\nconst FLUID = 0.\nconst WALL = 1.\nconst LID = 2.","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Declare variables to be stored in a Particle","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"mutable struct Particle <: AbstractParticle\n\tx::RealVector\t#position\n\tv::RealVector #velocity\n\ta::RealVector #acceleratation\n\trho::Float64 #density\n\tDrho::Float64 #rate of density\n\tP::Float64 #pressure\n\ttype::Float64 #particle type\n\tParticle(x::RealVector, type::Float64) = begin\n\t\tspeed = (type == LID ? vlid : 0.)\n\t\treturn new(x, speed*VECX, VEC0, rho0, 0., 0., type)\n\tend\nend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Define geometry and create particles","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"function make_system()\n\tgrid = Grid(dr, :hexagonal)\n\tbox = Rectangle(0., 0., llid, llid)\n\twall = BoundaryLayer(box, grid, wwall)\n\tsys = ParticleSystem(Particle, box + wall, h)\n\n\tlid   = Specification(wall, x -> x[2] > llid)\n\twall = Specification(wall, x -> x[2] <= llid)\n\n\tgenerate_particles!(sys, grid, box, x -> Particle(x, FLUID))\n\tgenerate_particles!(sys, grid, lid, x -> Particle(x, LID))\n\tgenerate_particles!(sys, grid, wall, x -> Particle(x, WALL))\n\treturn sys\nend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Define interactions between particles","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"#Define interactions between particles\n\n@inbounds function balance_of_mass!(p::Particle, q::Particle, r::Float64)\n\tif p.type == FLUID\n\t\tker = m*rDwendland2(h,r)\n\t\tp.Drho += ker*(dot(p.x-q.x, p.v-q.v))\n\tend\nend\n\nfunction find_pressure!(p::Particle)\n\tp.rho += p.Drho*dt\n\tp.Drho = 0.0\n\tp.P = c^2*(p.rho-rho0)\nend\n\n@inbounds function internal_force!(p::Particle, q::Particle, r::Float64)\n\tker = m*rDwendland2(h,r)\n\tp.a += -ker*(p.P/rho0^2 + q.P/rho0^2)*(p.x - q.x)\n\tp.a += +2*ker*(mu/rho0^2)*(p.v - q.v)\nend\n\nfunction move!(p::Particle)\n\tp.a = VEC0\n\tif p.type == FLUID\n\t\tp.x += dt*p.v\n\tend\nend\n\nfunction accelerate!(p::Particle)\n\tif p.type == FLUID\n\t\tp.v += 0.5*dt*p.a\n\tend\nend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"Time iteration","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"function main()\n\tsys = make_system()\n\tout = new_pvd_file(\"results/cavity_flow\")\n\t@time for k = 0 : Int64(round(t_end/dt))\n\t\tapply!(sys, move!)\n\t\tcreate_cell_list!(sys)\n\t\tapply!(sys, balance_of_mass!)\n\t\tapply!(sys, find_pressure!)\n\t\tapply!(sys, internal_force!)\n\t\tapply!(sys, accelerate!)\n\t\tif (k % Int64(round(dt_frame/dt)) == 0) #save the frame\n\t\t\tt = k*dt\n\t\t\t@show t\n\t\t\tsave_frame!(out, sys, :P, :v, :type)\n\t\tend\n\t\tapply!(sys, accelerate!)\n\tend\n\tsave_pvd_file(out)\nend\n\nend","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"","category":"page"},{"location":"examples/cavity_flow.html","page":"4: Lid-driven cavity","title":"4: Lid-driven cavity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"}]
}
